# Create an IAM role for EC2 
resource "aws_iam_role" "ec2_cloudwatch_role" {
  name = "ec2-cloudwatch-ssm-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      },
    ]
  })
}

resource "aws_iam_role" "cloudtrail_role" {
  name = "cloudtrail-cloudwatch-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = ["cloudtrail.amazonaws.com", "firehose.amazonaws.com", "logs.amazonaws.com"]
        },
      },
    ],
  })
}

resource "aws_iam_policy" "cloudwatch_policy" {
  name        = "cloudwatch-policy"
  description = "A policy that allows writing logs to CloudWatch"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "s3:PutObject",
          "firehose:PutRecord",
          "firehose:PutRecordBatch"
        ],
        Effect = "Allow",
        Resource = "*"
      },
    ]
  })
}

resource "aws_iam_role_policy_attachment" "attach_cloudwatch_policy" {
  role       = aws_iam_role.cloudtrail_role.name
  policy_arn = aws_iam_policy.cloudwatch_policy.arn
}

resource "aws_iam_role_policy_attachment" "attach_cloudwatch_policy_to_ec2" {
  role       = aws_iam_role.ec2_cloudwatch_role.name
  policy_arn = aws_iam_policy.cloudwatch_policy.arn
}

# Attach the AmazonSSMManagedInstanceCore policy to the existing role for SSM
resource "aws_iam_role_policy_attachment" "ssm_policy_attachment" {
  role       = aws_iam_role.ec2_cloudwatch_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ec2_profile" {
  name = "ec2-cloudwatch-profile"
  role = aws_iam_role.ec2_cloudwatch_role.name
}

# Create a CloudWatch Log Group and Stream 
resource "aws_cloudwatch_log_group" "operator_log_group" {
  name = "operator_log_group"
}

# Kinesis Data Firehose delivery stream to send CloudWatch Logs to S3
resource "aws_kinesis_firehose_delivery_stream" "cloudwatch_logs_stream" {
  name        = "cloudwatch-logs-stream"
  destination = "s3"

  s3_configuration {
    role_arn   = aws_iam_role.cloudtrail_role.arn
    bucket_arn = aws_s3_bucket.logs_bucket.arn
  }
}

resource "aws_cloudwatch_log_subscription_filter" "firehose_subscription_filter_security" {
  name            = "firehose-subscription-filter-security"
  log_group_name  = "Security"
  filter_pattern  = ""
  destination_arn = aws_kinesis_firehose_delivery_stream.cloudwatch_logs_stream.arn
  role_arn        = aws_iam_role.cloudtrail_role.arn

  depends_on = [
    aws_cloudwatch_log_group.operator_log_group,
    aws_kinesis_firehose_delivery_stream.cloudwatch_logs_stream,
  ]
}

resource "aws_cloudwatch_log_subscription_filter" "firehose_subscription_filter_sysmon" {
  name            = "firehose-subscription-filter-sysmon"
  log_group_name  = "Microsoft-Windows-Sysmon/Operational"
  filter_pattern  = ""
  destination_arn = aws_kinesis_firehose_delivery_stream.cloudwatch_logs_stream.arn
  role_arn        = aws_iam_role.cloudtrail_role.arn

  depends_on = [
    aws_cloudwatch_log_group.operator_log_group,
    aws_kinesis_firehose_delivery_stream.cloudwatch_logs_stream,
  ]

}

resource "aws_s3_bucket_policy" "logs_bucket" {
  bucket = aws_s3_bucket.logs_bucket.bucket

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "cloudtrail.amazonaws.com"
        }
        Action = "s3:GetBucketAcl"
        Resource = "arn:aws:s3:::${aws_s3_bucket.logs_bucket.bucket}"
      },
      {
        Effect = "Allow"
        Principal = {
          Service = "cloudtrail.amazonaws.com"
        }
        Action = "s3:PutObject"
        Resource = "arn:aws:s3:::${aws_s3_bucket.logs_bucket.bucket}/AWSLogs/*"
        Condition = {
          StringEquals = {
            "s3:x-amz-acl" = "bucket-owner-full-control"
          }
        }
      }
    ]
  })
}


resource "aws_s3_bucket" "logs_bucket" {
  bucket = "logs-bucket-${local.rs}"
  #aws_s3_bucket_acl  = "private"
  #acl    = "private"
}

resource "aws_cloudtrail" "operator_logs" {
  name                          = "operator_lab_cloudtrail"
  s3_bucket_name                = aws_s3_bucket.logs_bucket.id
  cloud_watch_logs_role_arn     = aws_iam_role.cloudtrail_role.arn
  cloud_watch_logs_group_arn    = "${aws_cloudwatch_log_group.operator_log_group.arn}:*" 
  include_global_service_events = true
  is_multi_region_trail         = true
  enable_logging                = true

  event_selector {
    read_write_type           = "All"
    include_management_events = true

    data_resource {
      type   = "AWS::S3::Object"
      values = ["arn:aws:s3:::"]
    }
  }
}

output "s3_cloudtrail_details" {
  value = <<EOS
----------------------------------
S3 CloudTrail & CloudWatch Details
----------------------------------
S3 Logs Bucket:   ${aws_s3_bucket.logs_bucket.id}
CloudTrail trail: ${aws_cloudtrail.operator_logs.name}
CloudWatch Group: ${aws_cloudwatch_log_group.operator_log_group.name}

EOS
}

resource "aws_s3_object" "cloudwatch_config" {
  bucket = aws_s3_bucket.staging.id
  key    = "cloudwatch.config.json"
  source = "${path.module}/files/windows/cloudwatch.config.json"
  content_type = "text/plain"
}

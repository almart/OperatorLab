# Created with Operator Lab
# The terraform file that creates a generic Linux OS 
variable "instance_type_{{ linux_count }}" {
  description = "The AWS instance type to use for servers."
  #default     = "t2.micro"
  default     = "t3a.medium"
}

variable "root_block_device_size_{{ linux_count }}" {
  description = "The volume size of the root block device."
  default     =  60 
}

data "aws_ami" "{{ linux_count }}" {
  most_recent      = true
  owners           = ["{{ linux_owner }}"]

  filter {
    name   = "name"
    values = ["{{ os_name_filter }}"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }
}

resource "aws_instance" "{{ linux_count }}" {
  ami                    = data.aws_ami.{{ linux_count }}.id
  instance_type          = var.instance_type_{{ linux_count }}
  subnet_id              = aws_subnet.user_subnet.id
  key_name               = module.key_pair.key_pair_name 
  vpc_security_group_ids = [aws_security_group.linux_ingress.id, aws_security_group.linux_ssh_ingress.id, aws_security_group.linux_allow_all_internal.id]

  connection {
    type        = "ssh"
    user        = "{{ connection_linux_user }}"
    private_key = tls_private_key.private_key.private_key_pem
    host        = self.public_ip
  }

  tags = {
    "Name" = "{{ linux_count }}"
  }

  root_block_device {
    volume_type           = "gp2"
    volume_size           = var.root_block_device_size_{{ linux_count }}
    delete_on_termination = "true"
  }

  user_data = data.template_file.{{ linux_count }}.rendered 

}

data "template_file" "{{ linux_count }}" {
  template = file("${path.module}/files/linux/{{ os_name }}.sh.tpl")

  vars = {
    s3_bucket = aws_s3_bucket.staging.id
    region    = var.region
    linux_os  = "{{ os_name }}"
  }
}

resource "local_file" "{{ linux_count }}" {
  # For inspecting the rendered bash script as it is loaded onto linux system 
  content = data.template_file.{{ linux_count }}.rendered
  filename = "${path.module}/output/linux/{{ os_name }}-{{ linux_count }}.sh"
}

output "details_{{ linux_count }}" {
  value = <<CONFIGURATION
----------------
{{ linux_count }}
----------------
OS:          {{ os_name }}
Public IP:   ${aws_instance.{{ linux_count }}.public_ip} 
Private IP:  ${aws_instance.{{ linux_count }}.private_ip} 
EC2 Inst ID: ${aws_instance.{{ linux_count }}.id}

SSH to {{ linux_count }}
---------------
ssh -i ssh_key.pem {{ connection_linux_user }}@${aws_instance.{{ linux_count }}.public_ip}  

CONFIGURATION
}
